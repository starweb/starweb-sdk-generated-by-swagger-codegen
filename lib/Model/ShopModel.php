<?php


/**
 * ShopModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Starweb Shop API v.2
 *
 * This API is only allowed to be used by partners of Starweb AB and further requires explicit permission from both Starweb AB and the shop owner. If you are interested in using it, please contact us at starwebapi@starweb.se
 *
 * OpenAPI spec version: 2.0.0
 * Contact: starwebapi@starweb.se
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.0-rc1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;



use \ArrayAccess;


use \Swagger\Client\ObjectSerializer;

/**
 * ShopModel Class Doc Comment
 *
 * @category Class

 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ShopModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ShopModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string''id_code' => 'string''status' => 'string''default_lang_code' => 'string''active_lang_codes' => 'string[]''base_currency' => 'string''default_customer_country_code' => 'string''general_default_vat_rate' => 'float''shop_company_name' => 'string''shop_address' => 'string''shop_postal_code' => 'string''shop_city' => 'string''shop_org_no' => 'string''shop_phone_no' => 'string''shop_vat_no' => 'string''shop_country_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null'id_code' => null'status' => null'default_lang_code' => null'active_lang_codes' => null'base_currency' => null'default_customer_country_code' => null'general_default_vat_rate' => 'float''shop_company_name' => null'shop_address' => null'shop_postal_code' => null'shop_city' => null'shop_org_no' => null'shop_phone_no' => null'shop_vat_no' => null'shop_country_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name''id_code' => 'idCode''status' => 'status''default_lang_code' => 'defaultLangCode''active_lang_codes' => 'activeLangCodes''base_currency' => 'baseCurrency''default_customer_country_code' => 'defaultCustomerCountryCode''general_default_vat_rate' => 'generalDefaultVatRate''shop_company_name' => 'shopCompanyName''shop_address' => 'shopAddress''shop_postal_code' => 'shopPostalCode''shop_city' => 'shopCity''shop_org_no' => 'shopOrgNo''shop_phone_no' => 'shopPhoneNo''shop_vat_no' => 'shopVatNo''shop_country_code' => 'shopCountryCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName''id_code' => 'setIdCode''status' => 'setStatus''default_lang_code' => 'setDefaultLangCode''active_lang_codes' => 'setActiveLangCodes''base_currency' => 'setBaseCurrency''default_customer_country_code' => 'setDefaultCustomerCountryCode''general_default_vat_rate' => 'setGeneralDefaultVatRate''shop_company_name' => 'setShopCompanyName''shop_address' => 'setShopAddress''shop_postal_code' => 'setShopPostalCode''shop_city' => 'setShopCity''shop_org_no' => 'setShopOrgNo''shop_phone_no' => 'setShopPhoneNo''shop_vat_no' => 'setShopVatNo''shop_country_code' => 'setShopCountryCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName''id_code' => 'getIdCode''status' => 'getStatus''default_lang_code' => 'getDefaultLangCode''active_lang_codes' => 'getActiveLangCodes''base_currency' => 'getBaseCurrency''default_customer_country_code' => 'getDefaultCustomerCountryCode''general_default_vat_rate' => 'getGeneralDefaultVatRate''shop_company_name' => 'getShopCompanyName''shop_address' => 'getShopAddress''shop_postal_code' => 'getShopPostalCode''shop_city' => 'getShopCity''shop_org_no' => 'getShopOrgNo''shop_phone_no' => 'getShopPhoneNo''shop_vat_no' => 'getShopVatNo''shop_country_code' => 'getShopCountryCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    
    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];
    

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        
        
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        
        $this->container['id_code'] = isset($data['id_code']) ? $data['id_code'] : null;
        
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        
        $this->container['default_lang_code'] = isset($data['default_lang_code']) ? $data['default_lang_code'] : null;
        
        $this->container['active_lang_codes'] = isset($data['active_lang_codes']) ? $data['active_lang_codes'] : null;
        
        $this->container['base_currency'] = isset($data['base_currency']) ? $data['base_currency'] : null;
        
        $this->container['default_customer_country_code'] = isset($data['default_customer_country_code']) ? $data['default_customer_country_code'] : null;
        
        $this->container['general_default_vat_rate'] = isset($data['general_default_vat_rate']) ? $data['general_default_vat_rate'] : null;
        
        $this->container['shop_company_name'] = isset($data['shop_company_name']) ? $data['shop_company_name'] : null;
        
        $this->container['shop_address'] = isset($data['shop_address']) ? $data['shop_address'] : null;
        
        $this->container['shop_postal_code'] = isset($data['shop_postal_code']) ? $data['shop_postal_code'] : null;
        
        $this->container['shop_city'] = isset($data['shop_city']) ? $data['shop_city'] : null;
        
        $this->container['shop_org_no'] = isset($data['shop_org_no']) ? $data['shop_org_no'] : null;
        
        $this->container['shop_phone_no'] = isset($data['shop_phone_no']) ? $data['shop_phone_no'] : null;
        
        $this->container['shop_vat_no'] = isset($data['shop_vat_no']) ? $data['shop_vat_no'] : null;
        
        $this->container['shop_country_code'] = isset($data['shop_country_code']) ? $data['shop_country_code'] : null;
        
        
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        
        
        $invalidProperties = [];
        

        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        

        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        return true;
    }

    

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The shop name
     *
     * @return $this
     */
    public function setName($name)
    {
        
        
        $this->container['name'] = $name;

        return $this;
    }
    

    /**
     * Gets id_code
     *
     * @return string
     */
    public function getIdCode()
    {
        return $this->container['id_code'];
    }

    /**
     * Sets id_code
     *
     * @param string $id_code A unique id code for this shop
     *
     * @return $this
     */
    public function setIdCode($id_code)
    {
        
        
        $this->container['id_code'] = $id_code;

        return $this;
    }
    

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The current status of this shop. Possible values are: open, closed, inactive
     *
     * @return $this
     */
    public function setStatus($status)
    {
        
        
        $this->container['status'] = $status;

        return $this;
    }
    

    /**
     * Gets default_lang_code
     *
     * @return string
     */
    public function getDefaultLangCode()
    {
        return $this->container['default_lang_code'];
    }

    /**
     * Sets default_lang_code
     *
     * @param string $default_lang_code Shops default language code
     *
     * @return $this
     */
    public function setDefaultLangCode($default_lang_code)
    {
        
        
        $this->container['default_lang_code'] = $default_lang_code;

        return $this;
    }
    

    /**
     * Gets active_lang_codes
     *
     * @return string[]
     */
    public function getActiveLangCodes()
    {
        return $this->container['active_lang_codes'];
    }

    /**
     * Sets active_lang_codes
     *
     * @param string[] $active_lang_codes Active languages in shop
     *
     * @return $this
     */
    public function setActiveLangCodes($active_lang_codes)
    {
        
        
        $this->container['active_lang_codes'] = $active_lang_codes;

        return $this;
    }
    

    /**
     * Gets base_currency
     *
     * @return string
     */
    public function getBaseCurrency()
    {
        return $this->container['base_currency'];
    }

    /**
     * Sets base_currency
     *
     * @param string $base_currency The shops base currency. All currencies and related data can be fetched using the /currencies endpoint
     *
     * @return $this
     */
    public function setBaseCurrency($base_currency)
    {
        
        
        $this->container['base_currency'] = $base_currency;

        return $this;
    }
    

    /**
     * Gets default_customer_country_code
     *
     * @return string
     */
    public function getDefaultCustomerCountryCode()
    {
        return $this->container['default_customer_country_code'];
    }

    /**
     * Sets default_customer_country_code
     *
     * @param string $default_customer_country_code The default customer country
     *
     * @return $this
     */
    public function setDefaultCustomerCountryCode($default_customer_country_code)
    {
        
        
        $this->container['default_customer_country_code'] = $default_customer_country_code;

        return $this;
    }
    

    /**
     * Gets general_default_vat_rate
     *
     * @return float
     */
    public function getGeneralDefaultVatRate()
    {
        return $this->container['general_default_vat_rate'];
    }

    /**
     * Sets general_default_vat_rate
     *
     * @param float $general_default_vat_rate The default vat rate for new products
     *
     * @return $this
     */
    public function setGeneralDefaultVatRate($general_default_vat_rate)
    {
        
        
        $this->container['general_default_vat_rate'] = $general_default_vat_rate;

        return $this;
    }
    

    /**
     * Gets shop_company_name
     *
     * @return string
     */
    public function getShopCompanyName()
    {
        return $this->container['shop_company_name'];
    }

    /**
     * Sets shop_company_name
     *
     * @param string $shop_company_name The company running this web shop
     *
     * @return $this
     */
    public function setShopCompanyName($shop_company_name)
    {
        
        
        $this->container['shop_company_name'] = $shop_company_name;

        return $this;
    }
    

    /**
     * Gets shop_address
     *
     * @return string
     */
    public function getShopAddress()
    {
        return $this->container['shop_address'];
    }

    /**
     * Sets shop_address
     *
     * @param string $shop_address The address to the web shop
     *
     * @return $this
     */
    public function setShopAddress($shop_address)
    {
        
        
        $this->container['shop_address'] = $shop_address;

        return $this;
    }
    

    /**
     * Gets shop_postal_code
     *
     * @return string
     */
    public function getShopPostalCode()
    {
        return $this->container['shop_postal_code'];
    }

    /**
     * Sets shop_postal_code
     *
     * @param string $shop_postal_code The postal code to the web shop
     *
     * @return $this
     */
    public function setShopPostalCode($shop_postal_code)
    {
        
        
        $this->container['shop_postal_code'] = $shop_postal_code;

        return $this;
    }
    

    /**
     * Gets shop_city
     *
     * @return string
     */
    public function getShopCity()
    {
        return $this->container['shop_city'];
    }

    /**
     * Sets shop_city
     *
     * @param string $shop_city The city to the web shop
     *
     * @return $this
     */
    public function setShopCity($shop_city)
    {
        
        
        $this->container['shop_city'] = $shop_city;

        return $this;
    }
    

    /**
     * Gets shop_org_no
     *
     * @return string
     */
    public function getShopOrgNo()
    {
        return $this->container['shop_org_no'];
    }

    /**
     * Sets shop_org_no
     *
     * @param string $shop_org_no The business id of the company running the web shop
     *
     * @return $this
     */
    public function setShopOrgNo($shop_org_no)
    {
        
        
        $this->container['shop_org_no'] = $shop_org_no;

        return $this;
    }
    

    /**
     * Gets shop_phone_no
     *
     * @return string
     */
    public function getShopPhoneNo()
    {
        return $this->container['shop_phone_no'];
    }

    /**
     * Sets shop_phone_no
     *
     * @param string $shop_phone_no The contact phone number to the web shop
     *
     * @return $this
     */
    public function setShopPhoneNo($shop_phone_no)
    {
        
        
        $this->container['shop_phone_no'] = $shop_phone_no;

        return $this;
    }
    

    /**
     * Gets shop_vat_no
     *
     * @return string
     */
    public function getShopVatNo()
    {
        return $this->container['shop_vat_no'];
    }

    /**
     * Sets shop_vat_no
     *
     * @param string $shop_vat_no The EU VAT number of the company running the web shop
     *
     * @return $this
     */
    public function setShopVatNo($shop_vat_no)
    {
        
        
        $this->container['shop_vat_no'] = $shop_vat_no;

        return $this;
    }
    

    /**
     * Gets shop_country_code
     *
     * @return string
     */
    public function getShopCountryCode()
    {
        return $this->container['shop_country_code'];
    }

    /**
     * Sets shop_country_code
     *
     * @param string $shop_country_code The country the company behind the web shop resides in
     *
     * @return $this
     */
    public function setShopCountryCode($shop_country_code)
    {
        
        
        $this->container['shop_country_code'] = $shop_country_code;

        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


