<?php


/**
 * AddressModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Starweb Shop API v.2
 *
 * This API is only allowed to be used by partners of Starweb AB and further requires explicit permission from both Starweb AB and the shop owner. If you are interested in using it, please contact us at starwebapi@starweb.se
 *
 * OpenAPI spec version: 2.0.0
 * Contact: starwebapi@starweb.se
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.0-rc1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;



use \ArrayAccess;


use \Swagger\Client\ObjectSerializer;

/**
 * AddressModel Class Doc Comment
 *
 * @category Class

 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AddressModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AddressModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'company_name' => 'string''first_name' => 'string''last_name' => 'string''care_of' => 'string''attention' => 'string''reference' => 'string''address' => 'string''postal_code' => 'string''city' => 'string''state' => 'string''country_code' => 'string''phone_no' => 'string''mobile_phone_no' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'company_name' => null'first_name' => null'last_name' => null'care_of' => null'attention' => null'reference' => null'address' => null'postal_code' => null'city' => null'state' => null'country_code' => null'phone_no' => null'mobile_phone_no' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'company_name' => 'companyName''first_name' => 'firstName''last_name' => 'lastName''care_of' => 'careOf''attention' => 'attention''reference' => 'reference''address' => 'address''postal_code' => 'postalCode''city' => 'city''state' => 'state''country_code' => 'countryCode''phone_no' => 'phoneNo''mobile_phone_no' => 'mobilePhoneNo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'company_name' => 'setCompanyName''first_name' => 'setFirstName''last_name' => 'setLastName''care_of' => 'setCareOf''attention' => 'setAttention''reference' => 'setReference''address' => 'setAddress''postal_code' => 'setPostalCode''city' => 'setCity''state' => 'setState''country_code' => 'setCountryCode''phone_no' => 'setPhoneNo''mobile_phone_no' => 'setMobilePhoneNo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'company_name' => 'getCompanyName''first_name' => 'getFirstName''last_name' => 'getLastName''care_of' => 'getCareOf''attention' => 'getAttention''reference' => 'getReference''address' => 'getAddress''postal_code' => 'getPostalCode''city' => 'getCity''state' => 'getState''country_code' => 'getCountryCode''phone_no' => 'getPhoneNo''mobile_phone_no' => 'getMobilePhoneNo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    
    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];
    

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        
        
        $this->container['company_name'] = isset($data['company_name']) ? $data['company_name'] : null;
        
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        
        $this->container['care_of'] = isset($data['care_of']) ? $data['care_of'] : null;
        
        $this->container['attention'] = isset($data['attention']) ? $data['attention'] : null;
        
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        
        $this->container['postal_code'] = isset($data['postal_code']) ? $data['postal_code'] : null;
        
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        
        $this->container['country_code'] = isset($data['country_code']) ? $data['country_code'] : null;
        
        $this->container['phone_no'] = isset($data['phone_no']) ? $data['phone_no'] : null;
        
        $this->container['mobile_phone_no'] = isset($data['mobile_phone_no']) ? $data['mobile_phone_no'] : null;
        
        
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        
        
        $invalidProperties = [];
        

        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        

        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        return true;
    }

    

    /**
     * Gets company_name
     *
     * @return string
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string $company_name Company name
     *
     * @return $this
     */
    public function setCompanyName($company_name)
    {
        
        
        $this->container['company_name'] = $company_name;

        return $this;
    }
    

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name First name
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        
        
        $this->container['first_name'] = $first_name;

        return $this;
    }
    

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name Last name
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        
        
        $this->container['last_name'] = $last_name;

        return $this;
    }
    

    /**
     * Gets care_of
     *
     * @return string
     */
    public function getCareOf()
    {
        return $this->container['care_of'];
    }

    /**
     * Sets care_of
     *
     * @param string $care_of Care Of
     *
     * @return $this
     */
    public function setCareOf($care_of)
    {
        
        
        $this->container['care_of'] = $care_of;

        return $this;
    }
    

    /**
     * Gets attention
     *
     * @return string
     */
    public function getAttention()
    {
        return $this->container['attention'];
    }

    /**
     * Sets attention
     *
     * @param string $attention Attention
     *
     * @return $this
     */
    public function setAttention($attention)
    {
        
        
        $this->container['attention'] = $attention;

        return $this;
    }
    

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference Reference
     *
     * @return $this
     */
    public function setReference($reference)
    {
        
        
        $this->container['reference'] = $reference;

        return $this;
    }
    

    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address Address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        
        
        $this->container['address'] = $address;

        return $this;
    }
    

    /**
     * Gets postal_code
     *
     * @return string
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string $postal_code Postal Code
     *
     * @return $this
     */
    public function setPostalCode($postal_code)
    {
        
        
        $this->container['postal_code'] = $postal_code;

        return $this;
    }
    

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city City
     *
     * @return $this
     */
    public function setCity($city)
    {
        
        
        $this->container['city'] = $city;

        return $this;
    }
    

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state State
     *
     * @return $this
     */
    public function setState($state)
    {
        
        
        $this->container['state'] = $state;

        return $this;
    }
    

    /**
     * Gets country_code
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string $country_code Country code in ISO 3166-1 alpha-2 format
     *
     * @return $this
     */
    public function setCountryCode($country_code)
    {
        
        
        $this->container['country_code'] = $country_code;

        return $this;
    }
    

    /**
     * Gets phone_no
     *
     * @return string
     */
    public function getPhoneNo()
    {
        return $this->container['phone_no'];
    }

    /**
     * Sets phone_no
     *
     * @param string $phone_no Phone number in an international format
     *
     * @return $this
     */
    public function setPhoneNo($phone_no)
    {
        
        
        $this->container['phone_no'] = $phone_no;

        return $this;
    }
    

    /**
     * Gets mobile_phone_no
     *
     * @return string
     */
    public function getMobilePhoneNo()
    {
        return $this->container['mobile_phone_no'];
    }

    /**
     * Sets mobile_phone_no
     *
     * @param string $mobile_phone_no Mobile phone number in an international format
     *
     * @return $this
     */
    public function setMobilePhoneNo($mobile_phone_no)
    {
        
        
        $this->container['mobile_phone_no'] = $mobile_phone_no;

        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


