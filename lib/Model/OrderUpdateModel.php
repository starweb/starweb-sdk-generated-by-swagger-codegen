<?php


/**
 * OrderUpdateModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Starweb Shop API v.2
 *
 * This API is only allowed to be used by partners of Starweb AB and further requires explicit permission from both Starweb AB and the shop owner. If you are interested in using it, please contact us at starwebapi@starweb.se
 *
 * OpenAPI spec version: 2.0.0
 * Contact: starwebapi@starweb.se
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.0-rc1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;



use \ArrayAccess;


use \Swagger\Client\ObjectSerializer;

/**
 * OrderUpdateModel Class Doc Comment
 *
 * @category Class

 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderUpdateModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrderUpdateModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'order_id' => 'int''modified_at' => 'string''base_currency_code' => 'string''shop_country_code' => 'string''total_amount' => 'BigDecimal''total_vat' => 'BigDecimal''amount_to_pay' => 'BigDecimal''total_amount_in_base_currency' => 'BigDecimal''total_vat_in_base_currency' => 'BigDecimal''amount_to_pay_in_base_currency' => 'BigDecimal''created_at' => 'string''customer_id' => 'int''status_id' => 'int''on_order_status_change_send_email' => 'bool''on_order_status_change_process_payment' => 'bool''shipping_method_id' => 'int''payment_method_id' => 'int''payment_method_id_code' => 'string''payment_method_name' => 'string''payment_fee' => 'BigDecimal''payment_vat_rate' => 'BigDecimal''shipping_method_name' => 'string''shipping_cost' => 'BigDecimal''shipping_vat_rate' => 'BigDecimal''total_weight' => 'BigDecimal''custom_info1' => 'string''custom_info2' => 'string''custom_info3' => 'string''custom_info4' => 'string''discount_code' => 'string''amount_paid' => 'BigDecimal''amount_paid_in_base_currency' => 'BigDecimal''is_complete' => 'bool''currency_code' => 'string''currency_exchange_rate' => 'BigDecimal''currency_precision' => 'int''lang_code' => 'string''payment_reference' => 'string''payment_status' => 'string''is_read' => 'bool''has_comment' => 'bool''internal_comment' => 'string''shipping_tracker_type' => 'int''shipping_tracking_no' => 'string''original_customer_email' => 'string''original_customer_national_id_no' => 'string''original_customer_vat_no' => 'string''original_customer_custom_info1' => 'string''original_customer_custom_info2' => 'string''items' => '\Swagger\Client\Model\OrderItemModel[]''addresses' => '\Swagger\Client\Model\OrderAddressModel'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'order_id' => 'int32''modified_at' => null'base_currency_code' => null'shop_country_code' => null'total_amount' => null'total_vat' => null'amount_to_pay' => null'total_amount_in_base_currency' => null'total_vat_in_base_currency' => null'amount_to_pay_in_base_currency' => null'created_at' => null'customer_id' => 'int32''status_id' => 'int32''on_order_status_change_send_email' => null'on_order_status_change_process_payment' => null'shipping_method_id' => 'int32''payment_method_id' => 'int32''payment_method_id_code' => null'payment_method_name' => null'payment_fee' => null'payment_vat_rate' => null'shipping_method_name' => null'shipping_cost' => null'shipping_vat_rate' => null'total_weight' => null'custom_info1' => null'custom_info2' => null'custom_info3' => null'custom_info4' => null'discount_code' => null'amount_paid' => null'amount_paid_in_base_currency' => null'is_complete' => null'currency_code' => null'currency_exchange_rate' => null'currency_precision' => 'int32''lang_code' => null'payment_reference' => null'payment_status' => null'is_read' => null'has_comment' => null'internal_comment' => null'shipping_tracker_type' => 'int32''shipping_tracking_no' => null'original_customer_email' => null'original_customer_national_id_no' => null'original_customer_vat_no' => null'original_customer_custom_info1' => null'original_customer_custom_info2' => null'items' => null'addresses' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_id' => 'orderId''modified_at' => 'modifiedAt''base_currency_code' => 'baseCurrencyCode''shop_country_code' => 'shopCountryCode''total_amount' => 'totalAmount''total_vat' => 'totalVat''amount_to_pay' => 'amountToPay''total_amount_in_base_currency' => 'totalAmountInBaseCurrency''total_vat_in_base_currency' => 'totalVatInBaseCurrency''amount_to_pay_in_base_currency' => 'amountToPayInBaseCurrency''created_at' => 'createdAt''customer_id' => 'customerId''status_id' => 'statusId''on_order_status_change_send_email' => 'onOrderStatusChangeSendEmail''on_order_status_change_process_payment' => 'onOrderStatusChangeProcessPayment''shipping_method_id' => 'shippingMethodId''payment_method_id' => 'paymentMethodId''payment_method_id_code' => 'paymentMethodIdCode''payment_method_name' => 'paymentMethodName''payment_fee' => 'paymentFee''payment_vat_rate' => 'paymentVatRate''shipping_method_name' => 'shippingMethodName''shipping_cost' => 'shippingCost''shipping_vat_rate' => 'shippingVatRate''total_weight' => 'totalWeight''custom_info1' => 'customInfo1''custom_info2' => 'customInfo2''custom_info3' => 'customInfo3''custom_info4' => 'customInfo4''discount_code' => 'discountCode''amount_paid' => 'amountPaid''amount_paid_in_base_currency' => 'amountPaidInBaseCurrency''is_complete' => 'isComplete''currency_code' => 'currencyCode''currency_exchange_rate' => 'currencyExchangeRate''currency_precision' => 'currencyPrecision''lang_code' => 'langCode''payment_reference' => 'paymentReference''payment_status' => 'paymentStatus''is_read' => 'isRead''has_comment' => 'hasComment''internal_comment' => 'internalComment''shipping_tracker_type' => 'shippingTrackerType''shipping_tracking_no' => 'shippingTrackingNo''original_customer_email' => 'originalCustomerEmail''original_customer_national_id_no' => 'originalCustomerNationalIdNo''original_customer_vat_no' => 'originalCustomerVatNo''original_customer_custom_info1' => 'originalCustomerCustomInfo1''original_customer_custom_info2' => 'originalCustomerCustomInfo2''items' => 'items''addresses' => 'addresses'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_id' => 'setOrderId''modified_at' => 'setModifiedAt''base_currency_code' => 'setBaseCurrencyCode''shop_country_code' => 'setShopCountryCode''total_amount' => 'setTotalAmount''total_vat' => 'setTotalVat''amount_to_pay' => 'setAmountToPay''total_amount_in_base_currency' => 'setTotalAmountInBaseCurrency''total_vat_in_base_currency' => 'setTotalVatInBaseCurrency''amount_to_pay_in_base_currency' => 'setAmountToPayInBaseCurrency''created_at' => 'setCreatedAt''customer_id' => 'setCustomerId''status_id' => 'setStatusId''on_order_status_change_send_email' => 'setOnOrderStatusChangeSendEmail''on_order_status_change_process_payment' => 'setOnOrderStatusChangeProcessPayment''shipping_method_id' => 'setShippingMethodId''payment_method_id' => 'setPaymentMethodId''payment_method_id_code' => 'setPaymentMethodIdCode''payment_method_name' => 'setPaymentMethodName''payment_fee' => 'setPaymentFee''payment_vat_rate' => 'setPaymentVatRate''shipping_method_name' => 'setShippingMethodName''shipping_cost' => 'setShippingCost''shipping_vat_rate' => 'setShippingVatRate''total_weight' => 'setTotalWeight''custom_info1' => 'setCustomInfo1''custom_info2' => 'setCustomInfo2''custom_info3' => 'setCustomInfo3''custom_info4' => 'setCustomInfo4''discount_code' => 'setDiscountCode''amount_paid' => 'setAmountPaid''amount_paid_in_base_currency' => 'setAmountPaidInBaseCurrency''is_complete' => 'setIsComplete''currency_code' => 'setCurrencyCode''currency_exchange_rate' => 'setCurrencyExchangeRate''currency_precision' => 'setCurrencyPrecision''lang_code' => 'setLangCode''payment_reference' => 'setPaymentReference''payment_status' => 'setPaymentStatus''is_read' => 'setIsRead''has_comment' => 'setHasComment''internal_comment' => 'setInternalComment''shipping_tracker_type' => 'setShippingTrackerType''shipping_tracking_no' => 'setShippingTrackingNo''original_customer_email' => 'setOriginalCustomerEmail''original_customer_national_id_no' => 'setOriginalCustomerNationalIdNo''original_customer_vat_no' => 'setOriginalCustomerVatNo''original_customer_custom_info1' => 'setOriginalCustomerCustomInfo1''original_customer_custom_info2' => 'setOriginalCustomerCustomInfo2''items' => 'setItems''addresses' => 'setAddresses'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_id' => 'getOrderId''modified_at' => 'getModifiedAt''base_currency_code' => 'getBaseCurrencyCode''shop_country_code' => 'getShopCountryCode''total_amount' => 'getTotalAmount''total_vat' => 'getTotalVat''amount_to_pay' => 'getAmountToPay''total_amount_in_base_currency' => 'getTotalAmountInBaseCurrency''total_vat_in_base_currency' => 'getTotalVatInBaseCurrency''amount_to_pay_in_base_currency' => 'getAmountToPayInBaseCurrency''created_at' => 'getCreatedAt''customer_id' => 'getCustomerId''status_id' => 'getStatusId''on_order_status_change_send_email' => 'getOnOrderStatusChangeSendEmail''on_order_status_change_process_payment' => 'getOnOrderStatusChangeProcessPayment''shipping_method_id' => 'getShippingMethodId''payment_method_id' => 'getPaymentMethodId''payment_method_id_code' => 'getPaymentMethodIdCode''payment_method_name' => 'getPaymentMethodName''payment_fee' => 'getPaymentFee''payment_vat_rate' => 'getPaymentVatRate''shipping_method_name' => 'getShippingMethodName''shipping_cost' => 'getShippingCost''shipping_vat_rate' => 'getShippingVatRate''total_weight' => 'getTotalWeight''custom_info1' => 'getCustomInfo1''custom_info2' => 'getCustomInfo2''custom_info3' => 'getCustomInfo3''custom_info4' => 'getCustomInfo4''discount_code' => 'getDiscountCode''amount_paid' => 'getAmountPaid''amount_paid_in_base_currency' => 'getAmountPaidInBaseCurrency''is_complete' => 'getIsComplete''currency_code' => 'getCurrencyCode''currency_exchange_rate' => 'getCurrencyExchangeRate''currency_precision' => 'getCurrencyPrecision''lang_code' => 'getLangCode''payment_reference' => 'getPaymentReference''payment_status' => 'getPaymentStatus''is_read' => 'getIsRead''has_comment' => 'getHasComment''internal_comment' => 'getInternalComment''shipping_tracker_type' => 'getShippingTrackerType''shipping_tracking_no' => 'getShippingTrackingNo''original_customer_email' => 'getOriginalCustomerEmail''original_customer_national_id_no' => 'getOriginalCustomerNationalIdNo''original_customer_vat_no' => 'getOriginalCustomerVatNo''original_customer_custom_info1' => 'getOriginalCustomerCustomInfo1''original_customer_custom_info2' => 'getOriginalCustomerCustomInfo2''items' => 'getItems''addresses' => 'getAddresses'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    
    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];
    

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        
        
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        
        $this->container['modified_at'] = isset($data['modified_at']) ? $data['modified_at'] : null;
        
        $this->container['base_currency_code'] = isset($data['base_currency_code']) ? $data['base_currency_code'] : null;
        
        $this->container['shop_country_code'] = isset($data['shop_country_code']) ? $data['shop_country_code'] : null;
        
        $this->container['total_amount'] = isset($data['total_amount']) ? $data['total_amount'] : null;
        
        $this->container['total_vat'] = isset($data['total_vat']) ? $data['total_vat'] : null;
        
        $this->container['amount_to_pay'] = isset($data['amount_to_pay']) ? $data['amount_to_pay'] : null;
        
        $this->container['total_amount_in_base_currency'] = isset($data['total_amount_in_base_currency']) ? $data['total_amount_in_base_currency'] : null;
        
        $this->container['total_vat_in_base_currency'] = isset($data['total_vat_in_base_currency']) ? $data['total_vat_in_base_currency'] : null;
        
        $this->container['amount_to_pay_in_base_currency'] = isset($data['amount_to_pay_in_base_currency']) ? $data['amount_to_pay_in_base_currency'] : null;
        
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        
        $this->container['customer_id'] = isset($data['customer_id']) ? $data['customer_id'] : null;
        
        $this->container['status_id'] = isset($data['status_id']) ? $data['status_id'] : null;
        
        $this->container['on_order_status_change_send_email'] = isset($data['on_order_status_change_send_email']) ? $data['on_order_status_change_send_email'] : true;
        
        $this->container['on_order_status_change_process_payment'] = isset($data['on_order_status_change_process_payment']) ? $data['on_order_status_change_process_payment'] : true;
        
        $this->container['shipping_method_id'] = isset($data['shipping_method_id']) ? $data['shipping_method_id'] : null;
        
        $this->container['payment_method_id'] = isset($data['payment_method_id']) ? $data['payment_method_id'] : null;
        
        $this->container['payment_method_id_code'] = isset($data['payment_method_id_code']) ? $data['payment_method_id_code'] : null;
        
        $this->container['payment_method_name'] = isset($data['payment_method_name']) ? $data['payment_method_name'] : null;
        
        $this->container['payment_fee'] = isset($data['payment_fee']) ? $data['payment_fee'] : null;
        
        $this->container['payment_vat_rate'] = isset($data['payment_vat_rate']) ? $data['payment_vat_rate'] : null;
        
        $this->container['shipping_method_name'] = isset($data['shipping_method_name']) ? $data['shipping_method_name'] : null;
        
        $this->container['shipping_cost'] = isset($data['shipping_cost']) ? $data['shipping_cost'] : null;
        
        $this->container['shipping_vat_rate'] = isset($data['shipping_vat_rate']) ? $data['shipping_vat_rate'] : null;
        
        $this->container['total_weight'] = isset($data['total_weight']) ? $data['total_weight'] : null;
        
        $this->container['custom_info1'] = isset($data['custom_info1']) ? $data['custom_info1'] : null;
        
        $this->container['custom_info2'] = isset($data['custom_info2']) ? $data['custom_info2'] : null;
        
        $this->container['custom_info3'] = isset($data['custom_info3']) ? $data['custom_info3'] : null;
        
        $this->container['custom_info4'] = isset($data['custom_info4']) ? $data['custom_info4'] : null;
        
        $this->container['discount_code'] = isset($data['discount_code']) ? $data['discount_code'] : null;
        
        $this->container['amount_paid'] = isset($data['amount_paid']) ? $data['amount_paid'] : null;
        
        $this->container['amount_paid_in_base_currency'] = isset($data['amount_paid_in_base_currency']) ? $data['amount_paid_in_base_currency'] : null;
        
        $this->container['is_complete'] = isset($data['is_complete']) ? $data['is_complete'] : null;
        
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        
        $this->container['currency_exchange_rate'] = isset($data['currency_exchange_rate']) ? $data['currency_exchange_rate'] : null;
        
        $this->container['currency_precision'] = isset($data['currency_precision']) ? $data['currency_precision'] : null;
        
        $this->container['lang_code'] = isset($data['lang_code']) ? $data['lang_code'] : null;
        
        $this->container['payment_reference'] = isset($data['payment_reference']) ? $data['payment_reference'] : null;
        
        $this->container['payment_status'] = isset($data['payment_status']) ? $data['payment_status'] : null;
        
        $this->container['is_read'] = isset($data['is_read']) ? $data['is_read'] : null;
        
        $this->container['has_comment'] = isset($data['has_comment']) ? $data['has_comment'] : null;
        
        $this->container['internal_comment'] = isset($data['internal_comment']) ? $data['internal_comment'] : null;
        
        $this->container['shipping_tracker_type'] = isset($data['shipping_tracker_type']) ? $data['shipping_tracker_type'] : null;
        
        $this->container['shipping_tracking_no'] = isset($data['shipping_tracking_no']) ? $data['shipping_tracking_no'] : null;
        
        $this->container['original_customer_email'] = isset($data['original_customer_email']) ? $data['original_customer_email'] : null;
        
        $this->container['original_customer_national_id_no'] = isset($data['original_customer_national_id_no']) ? $data['original_customer_national_id_no'] : null;
        
        $this->container['original_customer_vat_no'] = isset($data['original_customer_vat_no']) ? $data['original_customer_vat_no'] : null;
        
        $this->container['original_customer_custom_info1'] = isset($data['original_customer_custom_info1']) ? $data['original_customer_custom_info1'] : null;
        
        $this->container['original_customer_custom_info2'] = isset($data['original_customer_custom_info2']) ? $data['original_customer_custom_info2'] : null;
        
        $this->container['items'] = isset($data['items']) ? $data['items'] : null;
        
        $this->container['addresses'] = isset($data['addresses']) ? $data['addresses'] : null;
        
        
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        
        
        $invalidProperties = [];
        

        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        

        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        return true;
    }

    

    /**
     * Gets order_id
     *
     * @return int
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param int $order_id The orders ID
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        
        
        $this->container['order_id'] = $order_id;

        return $this;
    }
    

    /**
     * Gets modified_at
     *
     * @return string
     */
    public function getModifiedAt()
    {
        return $this->container['modified_at'];
    }

    /**
     * Sets modified_at
     *
     * @param string $modified_at A timestamp of when the order was modified. The time should be formatted using ISO-8601
     *
     * @return $this
     */
    public function setModifiedAt($modified_at)
    {
        
        
        $this->container['modified_at'] = $modified_at;

        return $this;
    }
    

    /**
     * Gets base_currency_code
     *
     * @return string
     */
    public function getBaseCurrencyCode()
    {
        return $this->container['base_currency_code'];
    }

    /**
     * Sets base_currency_code
     *
     * @param string $base_currency_code The shops base currency code at the point of order creation
     *
     * @return $this
     */
    public function setBaseCurrencyCode($base_currency_code)
    {
        
        
        $this->container['base_currency_code'] = $base_currency_code;

        return $this;
    }
    

    /**
     * Gets shop_country_code
     *
     * @return string
     */
    public function getShopCountryCode()
    {
        return $this->container['shop_country_code'];
    }

    /**
     * Sets shop_country_code
     *
     * @param string $shop_country_code The shops country code at the point of order creation
     *
     * @return $this
     */
    public function setShopCountryCode($shop_country_code)
    {
        
        
        $this->container['shop_country_code'] = $shop_country_code;

        return $this;
    }
    

    /**
     * Gets total_amount
     *
     * @return BigDecimal
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount
     *
     * @param BigDecimal $total_amount The total order amount
     *
     * @return $this
     */
    public function setTotalAmount($total_amount)
    {
        
        
        $this->container['total_amount'] = $total_amount;

        return $this;
    }
    

    /**
     * Gets total_vat
     *
     * @return BigDecimal
     */
    public function getTotalVat()
    {
        return $this->container['total_vat'];
    }

    /**
     * Sets total_vat
     *
     * @param BigDecimal $total_vat The total order VAT amount
     *
     * @return $this
     */
    public function setTotalVat($total_vat)
    {
        
        
        $this->container['total_vat'] = $total_vat;

        return $this;
    }
    

    /**
     * Gets amount_to_pay
     *
     * @return BigDecimal
     */
    public function getAmountToPay()
    {
        return $this->container['amount_to_pay'];
    }

    /**
     * Sets amount_to_pay
     *
     * @param BigDecimal $amount_to_pay The total order amount to pay
     *
     * @return $this
     */
    public function setAmountToPay($amount_to_pay)
    {
        
        
        $this->container['amount_to_pay'] = $amount_to_pay;

        return $this;
    }
    

    /**
     * Gets total_amount_in_base_currency
     *
     * @return BigDecimal
     */
    public function getTotalAmountInBaseCurrency()
    {
        return $this->container['total_amount_in_base_currency'];
    }

    /**
     * Sets total_amount_in_base_currency
     *
     * @param BigDecimal $total_amount_in_base_currency The total order amount, in the shops base currency
     *
     * @return $this
     */
    public function setTotalAmountInBaseCurrency($total_amount_in_base_currency)
    {
        
        
        $this->container['total_amount_in_base_currency'] = $total_amount_in_base_currency;

        return $this;
    }
    

    /**
     * Gets total_vat_in_base_currency
     *
     * @return BigDecimal
     */
    public function getTotalVatInBaseCurrency()
    {
        return $this->container['total_vat_in_base_currency'];
    }

    /**
     * Sets total_vat_in_base_currency
     *
     * @param BigDecimal $total_vat_in_base_currency The total VAT amount, in the shops base currency
     *
     * @return $this
     */
    public function setTotalVatInBaseCurrency($total_vat_in_base_currency)
    {
        
        
        $this->container['total_vat_in_base_currency'] = $total_vat_in_base_currency;

        return $this;
    }
    

    /**
     * Gets amount_to_pay_in_base_currency
     *
     * @return BigDecimal
     */
    public function getAmountToPayInBaseCurrency()
    {
        return $this->container['amount_to_pay_in_base_currency'];
    }

    /**
     * Sets amount_to_pay_in_base_currency
     *
     * @param BigDecimal $amount_to_pay_in_base_currency The total amount to pay, in the shops base currency
     *
     * @return $this
     */
    public function setAmountToPayInBaseCurrency($amount_to_pay_in_base_currency)
    {
        
        
        $this->container['amount_to_pay_in_base_currency'] = $amount_to_pay_in_base_currency;

        return $this;
    }
    

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at A timestamp of when the order was created. The time should be formatted using ISO-8601
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        
        
        $this->container['created_at'] = $created_at;

        return $this;
    }
    

    /**
     * Gets customer_id
     *
     * @return int
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param int $customer_id The ID of the orders customer
     *
     * @return $this
     */
    public function setCustomerId($customer_id)
    {
        
        
        $this->container['customer_id'] = $customer_id;

        return $this;
    }
    

    /**
     * Gets status_id
     *
     * @return int
     */
    public function getStatusId()
    {
        return $this->container['status_id'];
    }

    /**
     * Sets status_id
     *
     * @param int $status_id The ID of the orders status
     *
     * @return $this
     */
    public function setStatusId($status_id)
    {
        
        
        $this->container['status_id'] = $status_id;

        return $this;
    }
    

    /**
     * Gets on_order_status_change_send_email
     *
     * @return bool
     */
    public function getOnOrderStatusChangeSendEmail()
    {
        return $this->container['on_order_status_change_send_email'];
    }

    /**
     * Sets on_order_status_change_send_email
     *
     * @param bool $on_order_status_change_send_email Set this to false to prevent sending email to customer on changes to statusId and new orders
     *
     * @return $this
     */
    public function setOnOrderStatusChangeSendEmail($on_order_status_change_send_email)
    {
        
        
        $this->container['on_order_status_change_send_email'] = $on_order_status_change_send_email;

        return $this;
    }
    

    /**
     * Gets on_order_status_change_process_payment
     *
     * @return bool
     */
    public function getOnOrderStatusChangeProcessPayment()
    {
        return $this->container['on_order_status_change_process_payment'];
    }

    /**
     * Sets on_order_status_change_process_payment
     *
     * @param bool $on_order_status_change_process_payment Set this to false to prevent processing payment on changes to statusId. Only applies to payment methods that support processing payments. For example charging a reserved amount or cancel a created invoice
     *
     * @return $this
     */
    public function setOnOrderStatusChangeProcessPayment($on_order_status_change_process_payment)
    {
        
        
        $this->container['on_order_status_change_process_payment'] = $on_order_status_change_process_payment;

        return $this;
    }
    

    /**
     * Gets shipping_method_id
     *
     * @return int
     */
    public function getShippingMethodId()
    {
        return $this->container['shipping_method_id'];
    }

    /**
     * Sets shipping_method_id
     *
     * @param int $shipping_method_id The ID of the orders shipping method
     *
     * @return $this
     */
    public function setShippingMethodId($shipping_method_id)
    {
        
        
        $this->container['shipping_method_id'] = $shipping_method_id;

        return $this;
    }
    

    /**
     * Gets payment_method_id
     *
     * @return int
     */
    public function getPaymentMethodId()
    {
        return $this->container['payment_method_id'];
    }

    /**
     * Sets payment_method_id
     *
     * @param int $payment_method_id The ID of the orders payment method
     *
     * @return $this
     */
    public function setPaymentMethodId($payment_method_id)
    {
        
        
        $this->container['payment_method_id'] = $payment_method_id;

        return $this;
    }
    

    /**
     * Gets payment_method_id_code
     *
     * @return string
     */
    public function getPaymentMethodIdCode()
    {
        return $this->container['payment_method_id_code'];
    }

    /**
     * Sets payment_method_id_code
     *
     * @param string $payment_method_id_code The ID code of the payment method.
     *
     * @return $this
     */
    public function setPaymentMethodIdCode($payment_method_id_code)
    {
        
        
        $this->container['payment_method_id_code'] = $payment_method_id_code;

        return $this;
    }
    

    /**
     * Gets payment_method_name
     *
     * @return string
     */
    public function getPaymentMethodName()
    {
        return $this->container['payment_method_name'];
    }

    /**
     * Sets payment_method_name
     *
     * @param string $payment_method_name Title of the orders payment method
     *
     * @return $this
     */
    public function setPaymentMethodName($payment_method_name)
    {
        
        
        $this->container['payment_method_name'] = $payment_method_name;

        return $this;
    }
    

    /**
     * Gets payment_fee
     *
     * @return BigDecimal
     */
    public function getPaymentFee()
    {
        return $this->container['payment_fee'];
    }

    /**
     * Sets payment_fee
     *
     * @param BigDecimal $payment_fee Payment fee
     *
     * @return $this
     */
    public function setPaymentFee($payment_fee)
    {
        
        
        $this->container['payment_fee'] = $payment_fee;

        return $this;
    }
    

    /**
     * Gets payment_vat_rate
     *
     * @return BigDecimal
     */
    public function getPaymentVatRate()
    {
        return $this->container['payment_vat_rate'];
    }

    /**
     * Sets payment_vat_rate
     *
     * @param BigDecimal $payment_vat_rate The VAT rate of the paymentFee in percent
     *
     * @return $this
     */
    public function setPaymentVatRate($payment_vat_rate)
    {
        
        
        $this->container['payment_vat_rate'] = $payment_vat_rate;

        return $this;
    }
    

    /**
     * Gets shipping_method_name
     *
     * @return string
     */
    public function getShippingMethodName()
    {
        return $this->container['shipping_method_name'];
    }

    /**
     * Sets shipping_method_name
     *
     * @param string $shipping_method_name Title of the orders shipping method
     *
     * @return $this
     */
    public function setShippingMethodName($shipping_method_name)
    {
        
        
        $this->container['shipping_method_name'] = $shipping_method_name;

        return $this;
    }
    

    /**
     * Gets shipping_cost
     *
     * @return BigDecimal
     */
    public function getShippingCost()
    {
        return $this->container['shipping_cost'];
    }

    /**
     * Sets shipping_cost
     *
     * @param BigDecimal $shipping_cost Shipping cost
     *
     * @return $this
     */
    public function setShippingCost($shipping_cost)
    {
        
        
        $this->container['shipping_cost'] = $shipping_cost;

        return $this;
    }
    

    /**
     * Gets shipping_vat_rate
     *
     * @return BigDecimal
     */
    public function getShippingVatRate()
    {
        return $this->container['shipping_vat_rate'];
    }

    /**
     * Sets shipping_vat_rate
     *
     * @param BigDecimal $shipping_vat_rate The VAT rate of the shippingCost in percent
     *
     * @return $this
     */
    public function setShippingVatRate($shipping_vat_rate)
    {
        
        
        $this->container['shipping_vat_rate'] = $shipping_vat_rate;

        return $this;
    }
    

    /**
     * Gets total_weight
     *
     * @return BigDecimal
     */
    public function getTotalWeight()
    {
        return $this->container['total_weight'];
    }

    /**
     * Sets total_weight
     *
     * @param BigDecimal $total_weight The total weight of the order in kg. This field is a calculated summary of all order items
     *
     * @return $this
     */
    public function setTotalWeight($total_weight)
    {
        
        
        $this->container['total_weight'] = $total_weight;

        return $this;
    }
    

    /**
     * Gets custom_info1
     *
     * @return string
     */
    public function getCustomInfo1()
    {
        return $this->container['custom_info1'];
    }

    /**
     * Sets custom_info1
     *
     * @param string $custom_info1 Custom info saved to an order. Can be linked to fields on the checkout page for additional data collection
     *
     * @return $this
     */
    public function setCustomInfo1($custom_info1)
    {
        
        
        $this->container['custom_info1'] = $custom_info1;

        return $this;
    }
    

    /**
     * Gets custom_info2
     *
     * @return string
     */
    public function getCustomInfo2()
    {
        return $this->container['custom_info2'];
    }

    /**
     * Sets custom_info2
     *
     * @param string $custom_info2 Custom info saved to an order. Can be linked to fields on the checkout page for additional data collection
     *
     * @return $this
     */
    public function setCustomInfo2($custom_info2)
    {
        
        
        $this->container['custom_info2'] = $custom_info2;

        return $this;
    }
    

    /**
     * Gets custom_info3
     *
     * @return string
     */
    public function getCustomInfo3()
    {
        return $this->container['custom_info3'];
    }

    /**
     * Sets custom_info3
     *
     * @param string $custom_info3 Custom info saved to an order. Can be linked to fields on the checkout page for additional data collection
     *
     * @return $this
     */
    public function setCustomInfo3($custom_info3)
    {
        
        
        $this->container['custom_info3'] = $custom_info3;

        return $this;
    }
    

    /**
     * Gets custom_info4
     *
     * @return string
     */
    public function getCustomInfo4()
    {
        return $this->container['custom_info4'];
    }

    /**
     * Sets custom_info4
     *
     * @param string $custom_info4 Custom info saved to an order. Can be linked to fields on the checkout page for additional data collection
     *
     * @return $this
     */
    public function setCustomInfo4($custom_info4)
    {
        
        
        $this->container['custom_info4'] = $custom_info4;

        return $this;
    }
    

    /**
     * Gets discount_code
     *
     * @return string
     */
    public function getDiscountCode()
    {
        return $this->container['discount_code'];
    }

    /**
     * Sets discount_code
     *
     * @param string $discount_code The code ID of a discount code that was used for this order
     *
     * @return $this
     */
    public function setDiscountCode($discount_code)
    {
        
        
        $this->container['discount_code'] = $discount_code;

        return $this;
    }
    

    /**
     * Gets amount_paid
     *
     * @return BigDecimal
     */
    public function getAmountPaid()
    {
        return $this->container['amount_paid'];
    }

    /**
     * Sets amount_paid
     *
     * @param BigDecimal $amount_paid The amount paid via the payment method for this order
     *
     * @return $this
     */
    public function setAmountPaid($amount_paid)
    {
        
        
        $this->container['amount_paid'] = $amount_paid;

        return $this;
    }
    

    /**
     * Gets amount_paid_in_base_currency
     *
     * @return BigDecimal
     */
    public function getAmountPaidInBaseCurrency()
    {
        return $this->container['amount_paid_in_base_currency'];
    }

    /**
     * Sets amount_paid_in_base_currency
     *
     * @param BigDecimal $amount_paid_in_base_currency Same as amountPaid, but in the shops base currency
     *
     * @return $this
     */
    public function setAmountPaidInBaseCurrency($amount_paid_in_base_currency)
    {
        
        
        $this->container['amount_paid_in_base_currency'] = $amount_paid_in_base_currency;

        return $this;
    }
    

    /**
     * Gets is_complete
     *
     * @return bool
     */
    public function getIsComplete()
    {
        return $this->container['is_complete'];
    }

    /**
     * Sets is_complete
     *
     * @param bool $is_complete Is the order completed (that is, is it completely saved and has the payment method processed and confirmed it)
     *
     * @return $this
     */
    public function setIsComplete($is_complete)
    {
        
        
        $this->container['is_complete'] = $is_complete;

        return $this;
    }
    

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code The currency code of the currency that was used for this order. Has to be a valid ISO 4217 currency code
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        
        
        $this->container['currency_code'] = $currency_code;

        return $this;
    }
    

    /**
     * Gets currency_exchange_rate
     *
     * @return BigDecimal
     */
    public function getCurrencyExchangeRate()
    {
        return $this->container['currency_exchange_rate'];
    }

    /**
     * Sets currency_exchange_rate
     *
     * @param BigDecimal $currency_exchange_rate The exchange rate between this orders currency and the shops base currency. Ff, for example, the shop base currency is SEK and this order was placed in NOK, where 1 SEK = 0.97 NOK - this value would be 0.97
     *
     * @return $this
     */
    public function setCurrencyExchangeRate($currency_exchange_rate)
    {
        
        
        $this->container['currency_exchange_rate'] = $currency_exchange_rate;

        return $this;
    }
    

    /**
     * Gets currency_precision
     *
     * @return int
     */
    public function getCurrencyPrecision()
    {
        return $this->container['currency_precision'];
    }

    /**
     * Sets currency_precision
     *
     * @param int $currency_precision The number of decimals to display
     *
     * @return $this
     */
    public function setCurrencyPrecision($currency_precision)
    {
        
        
        $this->container['currency_precision'] = $currency_precision;

        return $this;
    }
    

    /**
     * Gets lang_code
     *
     * @return string
     */
    public function getLangCode()
    {
        return $this->container['lang_code'];
    }

    /**
     * Sets lang_code
     *
     * @param string $lang_code Language Code (ISO 639-1) used for placing this order. Has to be a valid lang code that the shop has setup. Used for order update emails, etc.
     *
     * @return $this
     */
    public function setLangCode($lang_code)
    {
        
        
        $this->container['lang_code'] = $lang_code;

        return $this;
    }
    

    /**
     * Gets payment_reference
     *
     * @return string
     */
    public function getPaymentReference()
    {
        return $this->container['payment_reference'];
    }

    /**
     * Sets payment_reference
     *
     * @param string $payment_reference Reference to the payment methods payment transaction
     *
     * @return $this
     */
    public function setPaymentReference($payment_reference)
    {
        
        
        $this->container['payment_reference'] = $payment_reference;

        return $this;
    }
    

    /**
     * Gets payment_status
     *
     * @return string
     */
    public function getPaymentStatus()
    {
        return $this->container['payment_status'];
    }

    /**
     * Sets payment_status
     *
     * @param string $payment_status Status of the payment methods payment transaction
     *
     * @return $this
     */
    public function setPaymentStatus($payment_status)
    {
        
        
        $this->container['payment_status'] = $payment_status;

        return $this;
    }
    

    /**
     * Gets is_read
     *
     * @return bool
     */
    public function getIsRead()
    {
        return $this->container['is_read'];
    }

    /**
     * Sets is_read
     *
     * @param bool $is_read An order is read when an administrator has read it via the admin GUI
     *
     * @return $this
     */
    public function setIsRead($is_read)
    {
        
        
        $this->container['is_read'] = $is_read;

        return $this;
    }
    

    /**
     * Gets has_comment
     *
     * @return bool
     */
    public function getHasComment()
    {
        return $this->container['has_comment'];
    }

    /**
     * Sets has_comment
     *
     * @param bool $has_comment Whether the customer or an admin has added a comment to the order
     *
     * @return $this
     */
    public function setHasComment($has_comment)
    {
        
        
        $this->container['has_comment'] = $has_comment;

        return $this;
    }
    

    /**
     * Gets internal_comment
     *
     * @return string
     */
    public function getInternalComment()
    {
        return $this->container['internal_comment'];
    }

    /**
     * Sets internal_comment
     *
     * @param string $internal_comment An internal comment placed by an administrator. Not available to the customer
     *
     * @return $this
     */
    public function setInternalComment($internal_comment)
    {
        
        
        $this->container['internal_comment'] = $internal_comment;

        return $this;
    }
    

    /**
     * Gets shipping_tracker_type
     *
     * @return int
     */
    public function getShippingTrackerType()
    {
        return $this->container['shipping_tracker_type'];
    }

    /**
     * Sets shipping_tracker_type
     *
     * @param int $shipping_tracker_type The ID of the tracking number type. Types are available via: GET /shipping-tracker-types
     *
     * @return $this
     */
    public function setShippingTrackerType($shipping_tracker_type)
    {
        
        
        $this->container['shipping_tracker_type'] = $shipping_tracker_type;

        return $this;
    }
    

    /**
     * Gets shipping_tracking_no
     *
     * @return string
     */
    public function getShippingTrackingNo()
    {
        return $this->container['shipping_tracking_no'];
    }

    /**
     * Sets shipping_tracking_no
     *
     * @param string $shipping_tracking_no The shipping tracking number. Has to be in the format that is used for the chosen tracking type (please contact the freight forwarder regarding this).
     *
     * @return $this
     */
    public function setShippingTrackingNo($shipping_tracking_no)
    {
        
        
        $this->container['shipping_tracking_no'] = $shipping_tracking_no;

        return $this;
    }
    

    /**
     * Gets original_customer_email
     *
     * @return string
     */
    public function getOriginalCustomerEmail()
    {
        return $this->container['original_customer_email'];
    }

    /**
     * Sets original_customer_email
     *
     * @param string $original_customer_email The email address of the customer at the point of order creation
     *
     * @return $this
     */
    public function setOriginalCustomerEmail($original_customer_email)
    {
        
        
        $this->container['original_customer_email'] = $original_customer_email;

        return $this;
    }
    

    /**
     * Gets original_customer_national_id_no
     *
     * @return string
     */
    public function getOriginalCustomerNationalIdNo()
    {
        return $this->container['original_customer_national_id_no'];
    }

    /**
     * Sets original_customer_national_id_no
     *
     * @param string $original_customer_national_id_no The national id number of the customer at the point of order creation
     *
     * @return $this
     */
    public function setOriginalCustomerNationalIdNo($original_customer_national_id_no)
    {
        
        
        $this->container['original_customer_national_id_no'] = $original_customer_national_id_no;

        return $this;
    }
    

    /**
     * Gets original_customer_vat_no
     *
     * @return string
     */
    public function getOriginalCustomerVatNo()
    {
        return $this->container['original_customer_vat_no'];
    }

    /**
     * Sets original_customer_vat_no
     *
     * @param string $original_customer_vat_no The VAT number of the customer at the point of order creation
     *
     * @return $this
     */
    public function setOriginalCustomerVatNo($original_customer_vat_no)
    {
        
        
        $this->container['original_customer_vat_no'] = $original_customer_vat_no;

        return $this;
    }
    

    /**
     * Gets original_customer_custom_info1
     *
     * @return string
     */
    public function getOriginalCustomerCustomInfo1()
    {
        return $this->container['original_customer_custom_info1'];
    }

    /**
     * Sets original_customer_custom_info1
     *
     * @param string $original_customer_custom_info1 Custom customer info at the point of order creation
     *
     * @return $this
     */
    public function setOriginalCustomerCustomInfo1($original_customer_custom_info1)
    {
        
        
        $this->container['original_customer_custom_info1'] = $original_customer_custom_info1;

        return $this;
    }
    

    /**
     * Gets original_customer_custom_info2
     *
     * @return string
     */
    public function getOriginalCustomerCustomInfo2()
    {
        return $this->container['original_customer_custom_info2'];
    }

    /**
     * Sets original_customer_custom_info2
     *
     * @param string $original_customer_custom_info2 Custom customer info at the point of order creation
     *
     * @return $this
     */
    public function setOriginalCustomerCustomInfo2($original_customer_custom_info2)
    {
        
        
        $this->container['original_customer_custom_info2'] = $original_customer_custom_info2;

        return $this;
    }
    

    /**
     * Gets items
     *
     * @return \Swagger\Client\Model\OrderItemModel[]
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \Swagger\Client\Model\OrderItemModel[] $items A collection of order items
     *
     * @return $this
     */
    public function setItems($items)
    {
        
        
        $this->container['items'] = $items;

        return $this;
    }
    

    /**
     * Gets addresses
     *
     * @return \Swagger\Client\Model\OrderAddressModel
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     *
     * @param \Swagger\Client\Model\OrderAddressModel $addresses addresses
     *
     * @return $this
     */
    public function setAddresses($addresses)
    {
        
        
        $this->container['addresses'] = $addresses;

        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


