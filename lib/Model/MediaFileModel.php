<?php


/**
 * MediaFileModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Starweb Shop API v.2
 *
 * This API is only allowed to be used by partners of Starweb AB and further requires explicit permission from both Starweb AB and the shop owner. If you are interested in using it, please contact us at starwebapi@starweb.se
 *
 * OpenAPI spec version: 2.0.0
 * Contact: starwebapi@starweb.se
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.0-rc1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;



use \ArrayAccess;


use \Swagger\Client\ObjectSerializer;

/**
 * MediaFileModel Class Doc Comment
 *
 * @category Class

 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MediaFileModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MediaFileModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'media_file_id' => 'int''name' => 'string''created_at' => 'string''modified_at' => 'string''size' => 'int''mime' => 'string''height' => 'int''width' => 'int''url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'media_file_id' => 'int32''name' => null'created_at' => null'modified_at' => null'size' => 'int32''mime' => null'height' => 'int32''width' => 'int32''url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'media_file_id' => 'mediaFileId''name' => 'name''created_at' => 'createdAt''modified_at' => 'modifiedAt''size' => 'size''mime' => 'mime''height' => 'height''width' => 'width''url' => 'url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'media_file_id' => 'setMediaFileId''name' => 'setName''created_at' => 'setCreatedAt''modified_at' => 'setModifiedAt''size' => 'setSize''mime' => 'setMime''height' => 'setHeight''width' => 'setWidth''url' => 'setUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'media_file_id' => 'getMediaFileId''name' => 'getName''created_at' => 'getCreatedAt''modified_at' => 'getModifiedAt''size' => 'getSize''mime' => 'getMime''height' => 'getHeight''width' => 'getWidth''url' => 'getUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    
    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];
    

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        
        
        $this->container['media_file_id'] = isset($data['media_file_id']) ? $data['media_file_id'] : null;
        
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        
        $this->container['modified_at'] = isset($data['modified_at']) ? $data['modified_at'] : null;
        
        $this->container['size'] = isset($data['size']) ? $data['size'] : null;
        
        $this->container['mime'] = isset($data['mime']) ? $data['mime'] : null;
        
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
        
        $this->container['width'] = isset($data['width']) ? $data['width'] : null;
        
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        
        
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        
        
        $invalidProperties = [];
        

        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        

        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        return true;
    }

    

    /**
     * Gets media_file_id
     *
     * @return int
     */
    public function getMediaFileId()
    {
        return $this->container['media_file_id'];
    }

    /**
     * Sets media_file_id
     *
     * @param int $media_file_id The media file ID
     *
     * @return $this
     */
    public function setMediaFileId($media_file_id)
    {
        
        
        $this->container['media_file_id'] = $media_file_id;

        return $this;
    }
    

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the media file
     *
     * @return $this
     */
    public function setName($name)
    {
        
        
        $this->container['name'] = $name;

        return $this;
    }
    

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at A timestamp of when the media file was created. The time should be formatted using ISO-8601
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        
        
        $this->container['created_at'] = $created_at;

        return $this;
    }
    

    /**
     * Gets modified_at
     *
     * @return string
     */
    public function getModifiedAt()
    {
        return $this->container['modified_at'];
    }

    /**
     * Sets modified_at
     *
     * @param string $modified_at A timestamp of when the media file was modifies. The time should be formatted using ISO-8601
     *
     * @return $this
     */
    public function setModifiedAt($modified_at)
    {
        
        
        $this->container['modified_at'] = $modified_at;

        return $this;
    }
    

    /**
     * Gets size
     *
     * @return int
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int $size The media files size in bytes
     *
     * @return $this
     */
    public function setSize($size)
    {
        
        
        $this->container['size'] = $size;

        return $this;
    }
    

    /**
     * Gets mime
     *
     * @return string
     */
    public function getMime()
    {
        return $this->container['mime'];
    }

    /**
     * Sets mime
     *
     * @param string $mime The media files mime type
     *
     * @return $this
     */
    public function setMime($mime)
    {
        
        
        $this->container['mime'] = $mime;

        return $this;
    }
    

    /**
     * Gets height
     *
     * @return int
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param int $height The media files height in pixels
     *
     * @return $this
     */
    public function setHeight($height)
    {
        
        
        $this->container['height'] = $height;

        return $this;
    }
    

    /**
     * Gets width
     *
     * @return int
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param int $width The media files width in pixels
     *
     * @return $this
     */
    public function setWidth($width)
    {
        
        
        $this->container['width'] = $width;

        return $this;
    }
    

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The media files URL
     *
     * @return $this
     */
    public function setUrl($url)
    {
        
        
        $this->container['url'] = $url;

        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


