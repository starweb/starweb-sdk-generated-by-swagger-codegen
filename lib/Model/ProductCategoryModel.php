<?php


/**
 * ProductCategoryModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Starweb Shop API v.2
 *
 * This API is only allowed to be used by partners of Starweb AB and further requires explicit permission from both Starweb AB and the shop owner. If you are interested in using it, please contact us at starwebapi@starweb.se
 *
 * OpenAPI spec version: 2.0.0
 * Contact: starwebapi@starweb.se
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.0-rc1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;



use \ArrayAccess;


use \Swagger\Client\ObjectSerializer;

/**
 * ProductCategoryModel Class Doc Comment
 *
 * @category Class

 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProductCategoryModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProductCategoryModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'category_id' => 'int''parent_id' => 'int''visibility' => 'string''sort_index' => 'int''open_page' => 'bool''image_file_id' => 'int''external_type' => 'string''external_id' => 'string''has_children' => 'bool''languages' => '\Swagger\Client\Model\ProductCategoryLanguagesModel[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'category_id' => 'int32''parent_id' => 'int32''visibility' => null'sort_index' => 'int32''open_page' => null'image_file_id' => 'int32''external_type' => null'external_id' => null'has_children' => null'languages' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'category_id' => 'categoryId''parent_id' => 'parentId''visibility' => 'visibility''sort_index' => 'sortIndex''open_page' => 'openPage''image_file_id' => 'imageFileId''external_type' => 'externalType''external_id' => 'externalId''has_children' => 'hasChildren''languages' => 'languages'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'category_id' => 'setCategoryId''parent_id' => 'setParentId''visibility' => 'setVisibility''sort_index' => 'setSortIndex''open_page' => 'setOpenPage''image_file_id' => 'setImageFileId''external_type' => 'setExternalType''external_id' => 'setExternalId''has_children' => 'setHasChildren''languages' => 'setLanguages'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'category_id' => 'getCategoryId''parent_id' => 'getParentId''visibility' => 'getVisibility''sort_index' => 'getSortIndex''open_page' => 'getOpenPage''image_file_id' => 'getImageFileId''external_type' => 'getExternalType''external_id' => 'getExternalId''has_children' => 'getHasChildren''languages' => 'getLanguages'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    
    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];
    

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        
        
        $this->container['category_id'] = isset($data['category_id']) ? $data['category_id'] : null;
        
        $this->container['parent_id'] = isset($data['parent_id']) ? $data['parent_id'] : null;
        
        $this->container['visibility'] = isset($data['visibility']) ? $data['visibility'] : null;
        
        $this->container['sort_index'] = isset($data['sort_index']) ? $data['sort_index'] : null;
        
        $this->container['open_page'] = isset($data['open_page']) ? $data['open_page'] : null;
        
        $this->container['image_file_id'] = isset($data['image_file_id']) ? $data['image_file_id'] : null;
        
        $this->container['external_type'] = isset($data['external_type']) ? $data['external_type'] : null;
        
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
        
        $this->container['has_children'] = isset($data['has_children']) ? $data['has_children'] : null;
        
        $this->container['languages'] = isset($data['languages']) ? $data['languages'] : null;
        
        
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        
        
        $invalidProperties = [];
        

        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        

        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        return true;
    }

    

    /**
     * Gets category_id
     *
     * @return int
     */
    public function getCategoryId()
    {
        return $this->container['category_id'];
    }

    /**
     * Sets category_id
     *
     * @param int $category_id The product category Id
     *
     * @return $this
     */
    public function setCategoryId($category_id)
    {
        
        
        $this->container['category_id'] = $category_id;

        return $this;
    }
    

    /**
     * Gets parent_id
     *
     * @return int
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     *
     * @param int $parent_id The category`s parent`s Id
     *
     * @return $this
     */
    public function setParentId($parent_id)
    {
        
        
        $this->container['parent_id'] = $parent_id;

        return $this;
    }
    

    /**
     * Gets visibility
     *
     * @return string
     */
    public function getVisibility()
    {
        return $this->container['visibility'];
    }

    /**
     * Sets visibility
     *
     * @param string $visibility The category`s visibility settings. Possible values are: visible, hidden and pricelists. Pricelists means that the category is only visible for customers with access to specific pricelists
     *
     * @return $this
     */
    public function setVisibility($visibility)
    {
        
        
        $this->container['visibility'] = $visibility;

        return $this;
    }
    

    /**
     * Gets sort_index
     *
     * @return int
     */
    public function getSortIndex()
    {
        return $this->container['sort_index'];
    }

    /**
     * Sets sort_index
     *
     * @param int $sort_index Sort index. A category with a lower value is displayed higher up in lists
     *
     * @return $this
     */
    public function setSortIndex($sort_index)
    {
        
        
        $this->container['sort_index'] = $sort_index;

        return $this;
    }
    

    /**
     * Gets open_page
     *
     * @return bool
     */
    public function getOpenPage()
    {
        return $this->container['open_page'];
    }

    /**
     * Sets open_page
     *
     * @param bool $open_page Whether or not links to the category should open a category page listing its products and sub categories on click.
     *
     * @return $this
     */
    public function setOpenPage($open_page)
    {
        
        
        $this->container['open_page'] = $open_page;

        return $this;
    }
    

    /**
     * Gets image_file_id
     *
     * @return int
     */
    public function getImageFileId()
    {
        return $this->container['image_file_id'];
    }

    /**
     * Sets image_file_id
     *
     * @param int $image_file_id The Id to the category`s image file. Has to be an existing mediaFile
     *
     * @return $this
     */
    public function setImageFileId($image_file_id)
    {
        
        
        $this->container['image_file_id'] = $image_file_id;

        return $this;
    }
    

    /**
     * Gets external_type
     *
     * @return string
     */
    public function getExternalType()
    {
        return $this->container['external_type'];
    }

    /**
     * Sets external_type
     *
     * @param string $external_type The system name the externalId belongs to.
     *
     * @return $this
     */
    public function setExternalType($external_type)
    {
        
        
        $this->container['external_type'] = $external_type;

        return $this;
    }
    

    /**
     * Gets external_id
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string $external_id The external Id for this category for the system named in externalType
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        
        
        $this->container['external_id'] = $external_id;

        return $this;
    }
    

    /**
     * Gets has_children
     *
     * @return bool
     */
    public function getHasChildren()
    {
        return $this->container['has_children'];
    }

    /**
     * Sets has_children
     *
     * @param bool $has_children Whether or not the category has any children categories
     *
     * @return $this
     */
    public function setHasChildren($has_children)
    {
        
        
        $this->container['has_children'] = $has_children;

        return $this;
    }
    

    /**
     * Gets languages
     *
     * @return \Swagger\Client\Model\ProductCategoryLanguagesModel[]
     */
    public function getLanguages()
    {
        return $this->container['languages'];
    }

    /**
     * Sets languages
     *
     * @param \Swagger\Client\Model\ProductCategoryLanguagesModel[] $languages languages
     *
     * @return $this
     */
    public function setLanguages($languages)
    {
        
        
        $this->container['languages'] = $languages;

        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


