<?php


/**
 * OrderItemModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Starweb Shop API v.2
 *
 * This API is only allowed to be used by partners of Starweb AB and further requires explicit permission from both Starweb AB and the shop owner. If you are interested in using it, please contact us at starwebapi@starweb.se
 *
 * OpenAPI spec version: 2.0.0
 * Contact: starwebapi@starweb.se
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.0-rc1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;



use \ArrayAccess;


use \Swagger\Client\ObjectSerializer;

/**
 * OrderItemModel Class Doc Comment
 *
 * @category Class

 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderItemModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrderItemModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'item_id' => 'int''sku' => 'string''description' => 'string''quantity' => 'int''unit_symbol' => 'string''unit_price' => 'BigDecimal''vat_rate' => 'BigDecimal''discount' => 'BigDecimal''discount_type' => 'string''sort_index' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'item_id' => 'int32''sku' => null'description' => null'quantity' => 'int32''unit_symbol' => null'unit_price' => null'vat_rate' => null'discount' => null'discount_type' => null'sort_index' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'item_id' => 'itemId''sku' => 'sku''description' => 'description''quantity' => 'quantity''unit_symbol' => 'unitSymbol''unit_price' => 'unitPrice''vat_rate' => 'vatRate''discount' => 'discount''discount_type' => 'discountType''sort_index' => 'sortIndex'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'item_id' => 'setItemId''sku' => 'setSku''description' => 'setDescription''quantity' => 'setQuantity''unit_symbol' => 'setUnitSymbol''unit_price' => 'setUnitPrice''vat_rate' => 'setVatRate''discount' => 'setDiscount''discount_type' => 'setDiscountType''sort_index' => 'setSortIndex'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'item_id' => 'getItemId''sku' => 'getSku''description' => 'getDescription''quantity' => 'getQuantity''unit_symbol' => 'getUnitSymbol''unit_price' => 'getUnitPrice''vat_rate' => 'getVatRate''discount' => 'getDiscount''discount_type' => 'getDiscountType''sort_index' => 'getSortIndex'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    
    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];
    

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        
        
        $this->container['item_id'] = isset($data['item_id']) ? $data['item_id'] : null;
        
        $this->container['sku'] = isset($data['sku']) ? $data['sku'] : null;
        
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        
        $this->container['unit_symbol'] = isset($data['unit_symbol']) ? $data['unit_symbol'] : null;
        
        $this->container['unit_price'] = isset($data['unit_price']) ? $data['unit_price'] : null;
        
        $this->container['vat_rate'] = isset($data['vat_rate']) ? $data['vat_rate'] : null;
        
        $this->container['discount'] = isset($data['discount']) ? $data['discount'] : null;
        
        $this->container['discount_type'] = isset($data['discount_type']) ? $data['discount_type'] : null;
        
        $this->container['sort_index'] = isset($data['sort_index']) ? $data['sort_index'] : null;
        
        
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        
        
        $invalidProperties = [];
        

        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        

        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        return true;
    }

    

    /**
     * Gets item_id
     *
     * @return int
     */
    public function getItemId()
    {
        return $this->container['item_id'];
    }

    /**
     * Sets item_id
     *
     * @param int $item_id The id of the order item
     *
     * @return $this
     */
    public function setItemId($item_id)
    {
        
        
        $this->container['item_id'] = $item_id;

        return $this;
    }
    

    /**
     * Gets sku
     *
     * @return string
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string $sku The SKU of the order item
     *
     * @return $this
     */
    public function setSku($sku)
    {
        
        
        $this->container['sku'] = $sku;

        return $this;
    }
    

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The description of the order item
     *
     * @return $this
     */
    public function setDescription($description)
    {
        
        
        $this->container['description'] = $description;

        return $this;
    }
    

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity The quantity of the order item
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        
        
        $this->container['quantity'] = $quantity;

        return $this;
    }
    

    /**
     * Gets unit_symbol
     *
     * @return string
     */
    public function getUnitSymbol()
    {
        return $this->container['unit_symbol'];
    }

    /**
     * Sets unit_symbol
     *
     * @param string $unit_symbol The unit symbol of the order item
     *
     * @return $this
     */
    public function setUnitSymbol($unit_symbol)
    {
        
        
        $this->container['unit_symbol'] = $unit_symbol;

        return $this;
    }
    

    /**
     * Gets unit_price
     *
     * @return BigDecimal
     */
    public function getUnitPrice()
    {
        return $this->container['unit_price'];
    }

    /**
     * Sets unit_price
     *
     * @param BigDecimal $unit_price The price per unit excluding VAT
     *
     * @return $this
     */
    public function setUnitPrice($unit_price)
    {
        
        
        $this->container['unit_price'] = $unit_price;

        return $this;
    }
    

    /**
     * Gets vat_rate
     *
     * @return BigDecimal
     */
    public function getVatRate()
    {
        return $this->container['vat_rate'];
    }

    /**
     * Sets vat_rate
     *
     * @param BigDecimal $vat_rate The items VAT rate in percent. 25.0 = 25% VAT
     *
     * @return $this
     */
    public function setVatRate($vat_rate)
    {
        
        
        $this->container['vat_rate'] = $vat_rate;

        return $this;
    }
    

    /**
     * Gets discount
     *
     * @return BigDecimal
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param BigDecimal $discount The discount for the entire order row. Either as a percentage or an amount. If this is an amount and set to 20.0, the sum 20.0 will be subtracted from the order total no matter what the quantity is set to.
     *
     * @return $this
     */
    public function setDiscount($discount)
    {
        
        
        $this->container['discount'] = $discount;

        return $this;
    }
    

    /**
     * Gets discount_type
     *
     * @return string
     */
    public function getDiscountType()
    {
        return $this->container['discount_type'];
    }

    /**
     * Sets discount_type
     *
     * @param string $discount_type The type of discount. Either ”amount” or ”percent”. Default is ”percent”
     *
     * @return $this
     */
    public function setDiscountType($discount_type)
    {
        
        
        $this->container['discount_type'] = $discount_type;

        return $this;
    }
    

    /**
     * Gets sort_index
     *
     * @return int
     */
    public function getSortIndex()
    {
        return $this->container['sort_index'];
    }

    /**
     * Sets sort_index
     *
     * @param int $sort_index The sort order of the order items
     *
     * @return $this
     */
    public function setSortIndex($sort_index)
    {
        
        
        $this->container['sort_index'] = $sort_index;

        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


