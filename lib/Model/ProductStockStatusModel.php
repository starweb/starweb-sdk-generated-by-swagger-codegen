<?php


/**
 * ProductStockStatusModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Starweb Shop API v.2
 *
 * This API is only allowed to be used by partners of Starweb AB and further requires explicit permission from both Starweb AB and the shop owner. If you are interested in using it, please contact us at starwebapi@starweb.se
 *
 * OpenAPI spec version: 2.0.0
 * Contact: starwebapi@starweb.se
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.0-rc1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;



use \ArrayAccess;


use \Swagger\Client\ObjectSerializer;

/**
 * ProductStockStatusModel Class Doc Comment
 *
 * @category Class

 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProductStockStatusModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProductStockStatusModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'stock_status_id' => 'int''id_code' => 'string''sort_index' => 'int''stockout_new_status_id' => 'int''product_buyable' => 'bool''in_stock' => 'bool''languages' => '\Swagger\Client\Model\ProductStockStatusLanguageModel[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'stock_status_id' => 'int32''id_code' => null'sort_index' => 'int32''stockout_new_status_id' => 'int32''product_buyable' => null'in_stock' => null'languages' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'stock_status_id' => 'stockStatusId''id_code' => 'idCode''sort_index' => 'sortIndex''stockout_new_status_id' => 'stockoutNewStatusId''product_buyable' => 'productBuyable''in_stock' => 'inStock''languages' => 'languages'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'stock_status_id' => 'setStockStatusId''id_code' => 'setIdCode''sort_index' => 'setSortIndex''stockout_new_status_id' => 'setStockoutNewStatusId''product_buyable' => 'setProductBuyable''in_stock' => 'setInStock''languages' => 'setLanguages'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'stock_status_id' => 'getStockStatusId''id_code' => 'getIdCode''sort_index' => 'getSortIndex''stockout_new_status_id' => 'getStockoutNewStatusId''product_buyable' => 'getProductBuyable''in_stock' => 'getInStock''languages' => 'getLanguages'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    
    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];
    

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        
        
        $this->container['stock_status_id'] = isset($data['stock_status_id']) ? $data['stock_status_id'] : null;
        
        $this->container['id_code'] = isset($data['id_code']) ? $data['id_code'] : null;
        
        $this->container['sort_index'] = isset($data['sort_index']) ? $data['sort_index'] : null;
        
        $this->container['stockout_new_status_id'] = isset($data['stockout_new_status_id']) ? $data['stockout_new_status_id'] : null;
        
        $this->container['product_buyable'] = isset($data['product_buyable']) ? $data['product_buyable'] : true;
        
        $this->container['in_stock'] = isset($data['in_stock']) ? $data['in_stock'] : false;
        
        $this->container['languages'] = isset($data['languages']) ? $data['languages'] : null;
        
        
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        
        
        $invalidProperties = [];
        

        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        

        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        return true;
    }

    

    /**
     * Gets stock_status_id
     *
     * @return int
     */
    public function getStockStatusId()
    {
        return $this->container['stock_status_id'];
    }

    /**
     * Sets stock_status_id
     *
     * @param int $stock_status_id The stock status id
     *
     * @return $this
     */
    public function setStockStatusId($stock_status_id)
    {
        
        
        $this->container['stock_status_id'] = $stock_status_id;

        return $this;
    }
    

    /**
     * Gets id_code
     *
     * @return string
     */
    public function getIdCode()
    {
        return $this->container['id_code'];
    }

    /**
     * Sets id_code
     *
     * @param string $id_code The idCode of the status. Only standard statuses has idCodes set. It is also not permitted to change names for standard statuses
     *
     * @return $this
     */
    public function setIdCode($id_code)
    {
        
        
        $this->container['id_code'] = $id_code;

        return $this;
    }
    

    /**
     * Gets sort_index
     *
     * @return int
     */
    public function getSortIndex()
    {
        return $this->container['sort_index'];
    }

    /**
     * Sets sort_index
     *
     * @param int $sort_index Sort index for this status
     *
     * @return $this
     */
    public function setSortIndex($sort_index)
    {
        
        
        $this->container['sort_index'] = $sort_index;

        return $this;
    }
    

    /**
     * Gets stockout_new_status_id
     *
     * @return int
     */
    public function getStockoutNewStatusId()
    {
        return $this->container['stockout_new_status_id'];
    }

    /**
     * Sets stockout_new_status_id
     *
     * @param int $stockout_new_status_id This has to be set to another, existing stock status id, or null. If a product has its quantity changed to negative, the product will then change stock status to the one with this id
     *
     * @return $this
     */
    public function setStockoutNewStatusId($stockout_new_status_id)
    {
        
        
        $this->container['stockout_new_status_id'] = $stockout_new_status_id;

        return $this;
    }
    

    /**
     * Gets product_buyable
     *
     * @return bool
     */
    public function getProductBuyable()
    {
        return $this->container['product_buyable'];
    }

    /**
     * Sets product_buyable
     *
     * @param bool $product_buyable Is the product buyable when this status is set?
     *
     * @return $this
     */
    public function setProductBuyable($product_buyable)
    {
        
        
        $this->container['product_buyable'] = $product_buyable;

        return $this;
    }
    

    /**
     * Gets in_stock
     *
     * @return bool
     */
    public function getInStock()
    {
        return $this->container['in_stock'];
    }

    /**
     * Sets in_stock
     *
     * @param bool $in_stock Should the product be displayed as \"in stock\" when this status is set?
     *
     * @return $this
     */
    public function setInStock($in_stock)
    {
        
        
        $this->container['in_stock'] = $in_stock;

        return $this;
    }
    

    /**
     * Gets languages
     *
     * @return \Swagger\Client\Model\ProductStockStatusLanguageModel[]
     */
    public function getLanguages()
    {
        return $this->container['languages'];
    }

    /**
     * Sets languages
     *
     * @param \Swagger\Client\Model\ProductStockStatusLanguageModel[] $languages languages
     *
     * @return $this
     */
    public function setLanguages($languages)
    {
        
        
        $this->container['languages'] = $languages;

        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


