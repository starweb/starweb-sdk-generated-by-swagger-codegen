<?php


/**
 * ProductLanguageModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Starweb Shop API v.2
 *
 * This API is only allowed to be used by partners of Starweb AB and further requires explicit permission from both Starweb AB and the shop owner. If you are interested in using it, please contact us at starwebapi@starweb.se
 *
 * OpenAPI spec version: 2.0.0
 * Contact: starwebapi@starweb.se
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.0-rc1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;



use \ArrayAccess;


use \Swagger\Client\ObjectSerializer;

/**
 * ProductLanguageModel Class Doc Comment
 *
 * @category Class

 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProductLanguageModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProductLanguageModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'lang_code' => 'string''name' => 'string''short_description' => 'string''long_description' => 'string''permalink' => 'string''page_title' => 'string''page_meta_description' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'lang_code' => null'name' => null'short_description' => null'long_description' => null'permalink' => null'page_title' => null'page_meta_description' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'lang_code' => 'langCode''name' => 'name''short_description' => 'shortDescription''long_description' => 'longDescription''permalink' => 'permalink''page_title' => 'pageTitle''page_meta_description' => 'pageMetaDescription'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'lang_code' => 'setLangCode''name' => 'setName''short_description' => 'setShortDescription''long_description' => 'setLongDescription''permalink' => 'setPermalink''page_title' => 'setPageTitle''page_meta_description' => 'setPageMetaDescription'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'lang_code' => 'getLangCode''name' => 'getName''short_description' => 'getShortDescription''long_description' => 'getLongDescription''permalink' => 'getPermalink''page_title' => 'getPageTitle''page_meta_description' => 'getPageMetaDescription'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    
    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];
    

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        
        
        $this->container['lang_code'] = isset($data['lang_code']) ? $data['lang_code'] : null;
        
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        
        $this->container['short_description'] = isset($data['short_description']) ? $data['short_description'] : null;
        
        $this->container['long_description'] = isset($data['long_description']) ? $data['long_description'] : null;
        
        $this->container['permalink'] = isset($data['permalink']) ? $data['permalink'] : null;
        
        $this->container['page_title'] = isset($data['page_title']) ? $data['page_title'] : null;
        
        $this->container['page_meta_description'] = isset($data['page_meta_description']) ? $data['page_meta_description'] : null;
        
        
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        
        
        $invalidProperties = [];
        

        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        

        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        return true;
    }

    

    /**
     * Gets lang_code
     *
     * @return string
     */
    public function getLangCode()
    {
        return $this->container['lang_code'];
    }

    /**
     * Sets lang_code
     *
     * @param string $lang_code The langCode for this language. Supported language codes are: sv, en, no, da, fi, de, fr, es
     *
     * @return $this
     */
    public function setLangCode($lang_code)
    {
        
        
        $this->container['lang_code'] = $lang_code;

        return $this;
    }
    

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The products name
     *
     * @return $this
     */
    public function setName($name)
    {
        
        
        $this->container['name'] = $name;

        return $this;
    }
    

    /**
     * Gets short_description
     *
     * @return string
     */
    public function getShortDescription()
    {
        return $this->container['short_description'];
    }

    /**
     * Sets short_description
     *
     * @param string $short_description The products short description
     *
     * @return $this
     */
    public function setShortDescription($short_description)
    {
        
        
        $this->container['short_description'] = $short_description;

        return $this;
    }
    

    /**
     * Gets long_description
     *
     * @return string
     */
    public function getLongDescription()
    {
        return $this->container['long_description'];
    }

    /**
     * Sets long_description
     *
     * @param string $long_description The products long description
     *
     * @return $this
     */
    public function setLongDescription($long_description)
    {
        
        
        $this->container['long_description'] = $long_description;

        return $this;
    }
    

    /**
     * Gets permalink
     *
     * @return string
     */
    public function getPermalink()
    {
        return $this->container['permalink'];
    }

    /**
     * Sets permalink
     *
     * @param string $permalink The permalink for this product and language
     *
     * @return $this
     */
    public function setPermalink($permalink)
    {
        
        
        $this->container['permalink'] = $permalink;

        return $this;
    }
    

    /**
     * Gets page_title
     *
     * @return string
     */
    public function getPageTitle()
    {
        return $this->container['page_title'];
    }

    /**
     * Sets page_title
     *
     * @param string $page_title The page title for this product
     *
     * @return $this
     */
    public function setPageTitle($page_title)
    {
        
        
        $this->container['page_title'] = $page_title;

        return $this;
    }
    

    /**
     * Gets page_meta_description
     *
     * @return string
     */
    public function getPageMetaDescription()
    {
        return $this->container['page_meta_description'];
    }

    /**
     * Sets page_meta_description
     *
     * @param string $page_meta_description The meta description for this product
     *
     * @return $this
     */
    public function setPageMetaDescription($page_meta_description)
    {
        
        
        $this->container['page_meta_description'] = $page_meta_description;

        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


