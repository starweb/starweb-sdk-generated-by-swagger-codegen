<?php


/**
 * ShippingMethodModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Starweb Shop API v.2
 *
 * This API is only allowed to be used by partners of Starweb AB and further requires explicit permission from both Starweb AB and the shop owner. If you are interested in using it, please contact us at starwebapi@starweb.se
 *
 * OpenAPI spec version: 2.0.0
 * Contact: starwebapi@starweb.se
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.0-rc1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;



use \ArrayAccess;


use \Swagger\Client\ObjectSerializer;

/**
 * ShippingMethodModel Class Doc Comment
 *
 * @category Class

 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ShippingMethodModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ShippingMethodModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'shipping_method_id' => 'int''active' => 'bool''valid_for_countries' => 'string''valid_countries_selected' => 'string[]''valid_for_min_items_subtotal' => 'float''valid_for_max_items_subtotal' => 'float''valid_for_min_weight' => 'float''valid_for_max_weight' => 'float''valid_for_customer_type' => 'string''free_shipping_min_items_subtotal' => 'float''free_shipping_min_weight' => 'float''languages' => '\Swagger\Client\Model\ShippingMethodLanguageModelCollection'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'shipping_method_id' => 'int32''active' => null'valid_for_countries' => null'valid_countries_selected' => null'valid_for_min_items_subtotal' => 'float''valid_for_max_items_subtotal' => 'float''valid_for_min_weight' => 'float''valid_for_max_weight' => 'float''valid_for_customer_type' => null'free_shipping_min_items_subtotal' => 'float''free_shipping_min_weight' => 'float''languages' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'shipping_method_id' => 'shippingMethodId''active' => 'active''valid_for_countries' => 'validForCountries''valid_countries_selected' => 'validCountriesSelected''valid_for_min_items_subtotal' => 'validForMinItemsSubtotal''valid_for_max_items_subtotal' => 'validForMaxItemsSubtotal''valid_for_min_weight' => 'validForMinWeight''valid_for_max_weight' => 'validForMaxWeight''valid_for_customer_type' => 'validForCustomerType''free_shipping_min_items_subtotal' => 'freeShippingMinItemsSubtotal''free_shipping_min_weight' => 'freeShippingMinWeight''languages' => 'languages'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'shipping_method_id' => 'setShippingMethodId''active' => 'setActive''valid_for_countries' => 'setValidForCountries''valid_countries_selected' => 'setValidCountriesSelected''valid_for_min_items_subtotal' => 'setValidForMinItemsSubtotal''valid_for_max_items_subtotal' => 'setValidForMaxItemsSubtotal''valid_for_min_weight' => 'setValidForMinWeight''valid_for_max_weight' => 'setValidForMaxWeight''valid_for_customer_type' => 'setValidForCustomerType''free_shipping_min_items_subtotal' => 'setFreeShippingMinItemsSubtotal''free_shipping_min_weight' => 'setFreeShippingMinWeight''languages' => 'setLanguages'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'shipping_method_id' => 'getShippingMethodId''active' => 'getActive''valid_for_countries' => 'getValidForCountries''valid_countries_selected' => 'getValidCountriesSelected''valid_for_min_items_subtotal' => 'getValidForMinItemsSubtotal''valid_for_max_items_subtotal' => 'getValidForMaxItemsSubtotal''valid_for_min_weight' => 'getValidForMinWeight''valid_for_max_weight' => 'getValidForMaxWeight''valid_for_customer_type' => 'getValidForCustomerType''free_shipping_min_items_subtotal' => 'getFreeShippingMinItemsSubtotal''free_shipping_min_weight' => 'getFreeShippingMinWeight''languages' => 'getLanguages'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    
    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];
    

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        
        
        $this->container['shipping_method_id'] = isset($data['shipping_method_id']) ? $data['shipping_method_id'] : null;
        
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        
        $this->container['valid_for_countries'] = isset($data['valid_for_countries']) ? $data['valid_for_countries'] : null;
        
        $this->container['valid_countries_selected'] = isset($data['valid_countries_selected']) ? $data['valid_countries_selected'] : null;
        
        $this->container['valid_for_min_items_subtotal'] = isset($data['valid_for_min_items_subtotal']) ? $data['valid_for_min_items_subtotal'] : null;
        
        $this->container['valid_for_max_items_subtotal'] = isset($data['valid_for_max_items_subtotal']) ? $data['valid_for_max_items_subtotal'] : null;
        
        $this->container['valid_for_min_weight'] = isset($data['valid_for_min_weight']) ? $data['valid_for_min_weight'] : null;
        
        $this->container['valid_for_max_weight'] = isset($data['valid_for_max_weight']) ? $data['valid_for_max_weight'] : null;
        
        $this->container['valid_for_customer_type'] = isset($data['valid_for_customer_type']) ? $data['valid_for_customer_type'] : null;
        
        $this->container['free_shipping_min_items_subtotal'] = isset($data['free_shipping_min_items_subtotal']) ? $data['free_shipping_min_items_subtotal'] : null;
        
        $this->container['free_shipping_min_weight'] = isset($data['free_shipping_min_weight']) ? $data['free_shipping_min_weight'] : null;
        
        $this->container['languages'] = isset($data['languages']) ? $data['languages'] : null;
        
        
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        
        
        $invalidProperties = [];
        

        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        

        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        return true;
    }

    

    /**
     * Gets shipping_method_id
     *
     * @return int
     */
    public function getShippingMethodId()
    {
        return $this->container['shipping_method_id'];
    }

    /**
     * Sets shipping_method_id
     *
     * @param int $shipping_method_id The shipping methods Id
     *
     * @return $this
     */
    public function setShippingMethodId($shipping_method_id)
    {
        
        
        $this->container['shipping_method_id'] = $shipping_method_id;

        return $this;
    }
    

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active If the shipping method is actively available on checkout or not
     *
     * @return $this
     */
    public function setActive($active)
    {
        
        
        $this->container['active'] = $active;

        return $this;
    }
    

    /**
     * Gets valid_for_countries
     *
     * @return string
     */
    public function getValidForCountries()
    {
        return $this->container['valid_for_countries'];
    }

    /**
     * Sets valid_for_countries
     *
     * @param string $valid_for_countries The restrictions to countries this shipping method is valid for. Valid values are: all, EU, non-EU, selected, none
     *
     * @return $this
     */
    public function setValidForCountries($valid_for_countries)
    {
        
        
        $this->container['valid_for_countries'] = $valid_for_countries;

        return $this;
    }
    

    /**
     * Gets valid_countries_selected
     *
     * @return string[]
     */
    public function getValidCountriesSelected()
    {
        return $this->container['valid_countries_selected'];
    }

    /**
     * Sets valid_countries_selected
     *
     * @param string[] $valid_countries_selected The countries this method is valid for (if validForCountries is set to ”selected”)
     *
     * @return $this
     */
    public function setValidCountriesSelected($valid_countries_selected)
    {
        
        
        $this->container['valid_countries_selected'] = $valid_countries_selected;

        return $this;
    }
    

    /**
     * Gets valid_for_min_items_subtotal
     *
     * @return float
     */
    public function getValidForMinItemsSubtotal()
    {
        return $this->container['valid_for_min_items_subtotal'];
    }

    /**
     * Sets valid_for_min_items_subtotal
     *
     * @param float $valid_for_min_items_subtotal The min order sub total that this method is valid for
     *
     * @return $this
     */
    public function setValidForMinItemsSubtotal($valid_for_min_items_subtotal)
    {
        
        
        $this->container['valid_for_min_items_subtotal'] = $valid_for_min_items_subtotal;

        return $this;
    }
    

    /**
     * Gets valid_for_max_items_subtotal
     *
     * @return float
     */
    public function getValidForMaxItemsSubtotal()
    {
        return $this->container['valid_for_max_items_subtotal'];
    }

    /**
     * Sets valid_for_max_items_subtotal
     *
     * @param float $valid_for_max_items_subtotal The max order sub total that this method is valid for
     *
     * @return $this
     */
    public function setValidForMaxItemsSubtotal($valid_for_max_items_subtotal)
    {
        
        
        $this->container['valid_for_max_items_subtotal'] = $valid_for_max_items_subtotal;

        return $this;
    }
    

    /**
     * Gets valid_for_min_weight
     *
     * @return float
     */
    public function getValidForMinWeight()
    {
        return $this->container['valid_for_min_weight'];
    }

    /**
     * Sets valid_for_min_weight
     *
     * @param float $valid_for_min_weight The min order weight that this method is valid for
     *
     * @return $this
     */
    public function setValidForMinWeight($valid_for_min_weight)
    {
        
        
        $this->container['valid_for_min_weight'] = $valid_for_min_weight;

        return $this;
    }
    

    /**
     * Gets valid_for_max_weight
     *
     * @return float
     */
    public function getValidForMaxWeight()
    {
        return $this->container['valid_for_max_weight'];
    }

    /**
     * Sets valid_for_max_weight
     *
     * @param float $valid_for_max_weight The max order weight that this method is valid for.
     *
     * @return $this
     */
    public function setValidForMaxWeight($valid_for_max_weight)
    {
        
        
        $this->container['valid_for_max_weight'] = $valid_for_max_weight;

        return $this;
    }
    

    /**
     * Gets valid_for_customer_type
     *
     * @return string
     */
    public function getValidForCustomerType()
    {
        return $this->container['valid_for_customer_type'];
    }

    /**
     * Sets valid_for_customer_type
     *
     * @param string $valid_for_customer_type The customer type this method is valid for. Valid values are: null (no restriction), person, company
     *
     * @return $this
     */
    public function setValidForCustomerType($valid_for_customer_type)
    {
        
        
        $this->container['valid_for_customer_type'] = $valid_for_customer_type;

        return $this;
    }
    

    /**
     * Gets free_shipping_min_items_subtotal
     *
     * @return float
     */
    public function getFreeShippingMinItemsSubtotal()
    {
        return $this->container['free_shipping_min_items_subtotal'];
    }

    /**
     * Sets free_shipping_min_items_subtotal
     *
     * @param float $free_shipping_min_items_subtotal Offer free shipping with this method if the minimum order sub total amount is at least this value
     *
     * @return $this
     */
    public function setFreeShippingMinItemsSubtotal($free_shipping_min_items_subtotal)
    {
        
        
        $this->container['free_shipping_min_items_subtotal'] = $free_shipping_min_items_subtotal;

        return $this;
    }
    

    /**
     * Gets free_shipping_min_weight
     *
     * @return float
     */
    public function getFreeShippingMinWeight()
    {
        return $this->container['free_shipping_min_weight'];
    }

    /**
     * Sets free_shipping_min_weight
     *
     * @param float $free_shipping_min_weight Offer free shipping with this method if the minimum order total weight is at least this value
     *
     * @return $this
     */
    public function setFreeShippingMinWeight($free_shipping_min_weight)
    {
        
        
        $this->container['free_shipping_min_weight'] = $free_shipping_min_weight;

        return $this;
    }
    

    /**
     * Gets languages
     *
     * @return \Swagger\Client\Model\ShippingMethodLanguageModelCollection
     */
    public function getLanguages()
    {
        return $this->container['languages'];
    }

    /**
     * Sets languages
     *
     * @param \Swagger\Client\Model\ShippingMethodLanguageModelCollection $languages languages
     *
     * @return $this
     */
    public function setLanguages($languages)
    {
        
        
        $this->container['languages'] = $languages;

        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


